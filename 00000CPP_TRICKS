std::move(B);
https://stackoverflow.com/questions/12613428/stl-vector-moving-all-elements-of-a-vector

# create a tuple => tie
http://www.cplusplus.com/reference/tuple/tie/
https://zxi.mytechroad.com/blog/dynamic-programming/leetcode-1293-shortest-path-in-a-grid-with-obstacles-elimination/

# 480. Sliding Window Media => tricky insertion sort
std::rotate => http://www.cplusplus.com/reference/algorithm/rotate/
std::upper_bound => http://www.cplusplus.com/reference/algorithm/upper_bound/

# 1316 std::string_view
https://www.learncpp.com/cpp-tutorial/6-6a-an-introduction-to-stdstring_view/

# std::accumulate
https://en.cppreference.com/w/cpp/algorithm/accumulate
const int sum = std::accumulate(nums.begin(), nums.end(), 0); // 0 is the initial value

# std::distance
http://www.cplusplus.com/reference/iterator/distance/
LC 1365


# std::nth_element
partial sort array
http://www.cplusplus.com/reference/algorithm/nth_element/
LC 1387

# const vs constexpr
https://stackoverflow.com/questions/14116003/difference-between-constexpr-and-const


# std::min_element
// LeetCode 931. Minimum Falling Path Sum
int myints[] = {3,7,2,5,6,4,9};

// using default comparison:
std::cout << "The smallest element is " << *std::min_element(myints,myints+7) << '\n';

// Tricky!!! last element is not included! The range used is [first,last), which contains all the elements between first and last, including the element pointed by first but not the element pointed by last.
